/* tslint:disable */
/* eslint-disable */
/**
 * Blueprint api
 * The blueprint API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EditUserDto,
  UserEntity,
} from '../models/index';
import {
    EditUserDtoFromJSON,
    EditUserDtoToJSON,
    UserEntityFromJSON,
    UserEntityToJSON,
} from '../models/index';

export interface EditUserByIdRequest {
    id: any;
    editUserDto: EditUserDto;
}

export interface UsersControllerRemoveUserRequest {
    id: any;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Receive id of user with payload for edit, check exist user if not return exception, if ok find user by id and edit him.
     * Receive id of user with payload and edit him.
     */
    async editUserByIdRaw(requestParameters: EditUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editUserById.');
        }

        if (requestParameters.editUserDto === null || requestParameters.editUserDto === undefined) {
            throw new runtime.RequiredError('editUserDto','Required parameter requestParameters.editUserDto was null or undefined when calling editUserById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditUserDtoToJSON(requestParameters.editUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * Receive id of user with payload for edit, check exist user if not return exception, if ok find user by id and edit him.
     * Receive id of user with payload and edit him.
     */
    async editUserById(requestParameters: EditUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEntity> {
        const response = await this.editUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receive all users of app
     */
    async receiveAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Receive all users of app
     */
    async receiveAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.receiveAllUsersRaw(initOverrides);
    }

    /**
     */
    async usersControllerProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersControllerProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersControllerProfileRaw(initOverrides);
    }

    /**
     */
    async usersControllerRemoveUserRaw(requestParameters: UsersControllerRemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersControllerRemoveUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersControllerRemoveUser(requestParameters: UsersControllerRemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersControllerRemoveUserRaw(requestParameters, initOverrides);
    }

}
