/* tslint:disable */
/* eslint-disable */
/**
 * Blueprint api
 * The blueprint API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDto,
  ErrorValidationDto,
  LoginByEmail,
  RefreshTokenDto,
  TokenValidationErrorDto,
  TokensResponse,
  UserWithToken,
} from '../models/index';
import {
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    ErrorValidationDtoFromJSON,
    ErrorValidationDtoToJSON,
    LoginByEmailFromJSON,
    LoginByEmailToJSON,
    RefreshTokenDtoFromJSON,
    RefreshTokenDtoToJSON,
    TokenValidationErrorDtoFromJSON,
    TokenValidationErrorDtoToJSON,
    TokensResponseFromJSON,
    TokensResponseToJSON,
    UserWithTokenFromJSON,
    UserWithTokenToJSON,
} from '../models/index';

export interface AuthControllerConfirmRegistrationRequest {
    token: string;
}

export interface AuthControllerLoginRequest {
    loginByEmail: LoginByEmail;
}

export interface AuthControllerLoginWithTempTokenRequest {
    tempToken: string;
}

export interface AuthControllerLogoutRequest {
    refreshTokenDto: RefreshTokenDto;
}

export interface AuthControllerRefreshRequest {
    refreshTokenDto: RefreshTokenDto;
}

export interface AuthControllerRegisterRequest {
    createUserDto: CreateUserDto;
}

export interface AuthControllerResetPasswordRequest {
    token: any;
}

export interface AuthControllerSendEmailForgotPasswordRequest {
    email: any;
}

export interface AuthControllerSendEmailVerificationRequest {
    email: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authControllerConfirmRegistrationRaw(requestParameters: AuthControllerConfirmRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authControllerConfirmRegistration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/confirm/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerConfirmRegistration(requestParameters: AuthControllerConfirmRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerConfirmRegistrationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithToken>> {
        if (requestParameters.loginByEmail === null || requestParameters.loginByEmail === undefined) {
            throw new runtime.RequiredError('loginByEmail','Required parameter requestParameters.loginByEmail was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginByEmailToJSON(requestParameters.loginByEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithTokenFromJSON(jsonValue));
    }

    /**
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithToken> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerLoginWithTempTokenRaw(requestParameters: AuthControllerLoginWithTempTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithToken>> {
        if (requestParameters.tempToken === null || requestParameters.tempToken === undefined) {
            throw new runtime.RequiredError('tempToken','Required parameter requestParameters.tempToken was null or undefined when calling authControllerLoginWithTempToken.');
        }

        const queryParameters: any = {};

        if (requestParameters.tempToken !== undefined) {
            queryParameters['tempToken'] = requestParameters.tempToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/token-login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithTokenFromJSON(jsonValue));
    }

    /**
     */
    async authControllerLoginWithTempToken(requestParameters: AuthControllerLoginWithTempTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithToken> {
        const response = await this.authControllerLoginWithTempTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerLogoutRaw(requestParameters: AuthControllerLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.refreshTokenDto === null || requestParameters.refreshTokenDto === undefined) {
            throw new runtime.RequiredError('refreshTokenDto','Required parameter requestParameters.refreshTokenDto was null or undefined when calling authControllerLogout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/logout`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenDtoToJSON(requestParameters.refreshTokenDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerLogout(requestParameters: AuthControllerLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerLogoutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authControllerRefreshRaw(requestParameters: AuthControllerRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensResponse>> {
        if (requestParameters.refreshTokenDto === null || requestParameters.refreshTokenDto === undefined) {
            throw new runtime.RequiredError('refreshTokenDto','Required parameter requestParameters.refreshTokenDto was null or undefined when calling authControllerRefresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenDtoToJSON(requestParameters.refreshTokenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensResponseFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRefresh(requestParameters: AuthControllerRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensResponse> {
        const response = await this.authControllerRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerRegisterRaw(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithToken>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling authControllerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithTokenFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRegister(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithToken> {
        const response = await this.authControllerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerResetPasswordRaw(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authControllerResetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/reset-password/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerResetPassword(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerResetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authControllerSendEmailForgotPasswordRaw(requestParameters: AuthControllerSendEmailForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling authControllerSendEmailForgotPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/forgot-password/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async authControllerSendEmailForgotPassword(requestParameters: AuthControllerSendEmailForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authControllerSendEmailForgotPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerSendEmailVerificationRaw(requestParameters: AuthControllerSendEmailVerificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling authControllerSendEmailVerification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/resend-verification/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerSendEmailVerification(requestParameters: AuthControllerSendEmailVerificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerSendEmailVerificationRaw(requestParameters, initOverrides);
    }

}
