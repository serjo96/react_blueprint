/* tslint:disable */
/* eslint-disable */
/**
 * Blueprint api
 * The blueprint API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserEntity } from './UserEntity';
import {
  UserEntityFromJSON,
  UserEntityFromJSONTyped,
  UserEntityToJSON,
} from './UserEntity';

/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  name: string;
  /**
   *
   * @type {Date}
   * @memberof Profile
   */
  birthday: Date;
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  photoUrl: string;
  /**
   *
   * @type {UserEntity}
   * @memberof Profile
   */
  user: UserEntity;
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  userId: string;
}

/**
 * Check if a given object implements the Profile interface.
 */
export function instanceOfProfile(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'birthday' in value;
  isInstance = isInstance && 'photoUrl' in value;
  isInstance = isInstance && 'user' in value;
  isInstance = isInstance && 'userId' in value;

  return isInstance;
}

export function ProfileFromJSON(json: any): Profile {
  return ProfileFromJSONTyped(json, false);
}

export function ProfileFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Profile {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    birthday: new Date(json['birthday']),
    photoUrl: json['photoUrl'],
    user: UserEntityFromJSON(json['user']),
    userId: json['userId'],
  };
}

export function ProfileToJSON(value?: Profile | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    birthday: value.birthday.toISOString(),
    photoUrl: value.photoUrl,
    user: UserEntityToJSON(value.user),
    userId: value.userId,
  };
}
