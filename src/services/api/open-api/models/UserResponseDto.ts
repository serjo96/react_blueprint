/* tslint:disable */
/* eslint-disable */
/**
 * Blueprint api
 * The blueprint API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileResponseDto } from './ProfileResponseDto';
import {
    ProfileResponseDtoFromJSON,
    ProfileResponseDtoFromJSONTyped,
    ProfileResponseDtoToJSON,
} from './ProfileResponseDto';

/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    id: string;
    /**
     * 
     * @type {ProfileResponseDto}
     * @memberof UserResponseDto
     */
    profile: ProfileResponseDto;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    roles: UserResponseDtoRolesEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    confirmed: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseDto
     */
    lastActiveAt: Date;
}


/**
 * @export
 */
export const UserResponseDtoRolesEnum = {
    Guest: 'guest',
    User: 'user',
    Moderator: 'moderator',
    Admin: 'admin'
} as const;
export type UserResponseDtoRolesEnum = typeof UserResponseDtoRolesEnum[keyof typeof UserResponseDtoRolesEnum];


/**
 * Check if a given object implements the UserResponseDto interface.
 */
export function instanceOfUserResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "profile" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "roles" in value;
    isInstance = isInstance && "confirmed" in value;
    isInstance = isInstance && "lastActiveAt" in value;

    return isInstance;
}

export function UserResponseDtoFromJSON(json: any): UserResponseDto {
    return UserResponseDtoFromJSONTyped(json, false);
}

export function UserResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'profile': ProfileResponseDtoFromJSON(json['profile']),
        'password': json['password'],
        'email': json['email'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'roles': json['roles'],
        'confirmed': json['confirmed'],
        'lastActiveAt': (new Date(json['lastActiveAt'])),
    };
}

export function UserResponseDtoToJSON(value?: UserResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'profile': ProfileResponseDtoToJSON(value.profile),
        'password': value.password,
        'email': value.email,
        'nickname': value.nickname,
        'roles': value.roles,
        'confirmed': value.confirmed,
        'lastActiveAt': (value.lastActiveAt.toISOString()),
    };
}

