/* tslint:disable */
/* eslint-disable */
/**
 * Blueprint api
 * The blueprint API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmailVerificationEntity } from './EmailVerificationEntity';
import {
  EmailVerificationEntityFromJSON,
  EmailVerificationEntityFromJSONTyped,
  EmailVerificationEntityToJSON,
} from './EmailVerificationEntity';
import type { ForgottenPasswordEntity } from './ForgottenPasswordEntity';
import {
  ForgottenPasswordEntityFromJSON,
  ForgottenPasswordEntityFromJSONTyped,
  ForgottenPasswordEntityToJSON,
} from './ForgottenPasswordEntity';
import type { Profile } from './Profile';
import {
  ProfileFromJSON,
  ProfileFromJSONTyped,
  ProfileToJSON,
} from './Profile';
import type { RefreshToken } from './RefreshToken';
import {
  RefreshTokenFromJSON,
  RefreshTokenFromJSONTyped,
  RefreshTokenToJSON,
} from './RefreshToken';

/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  nickname?: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  roles: UserEntityRolesEnum;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  confirmed: boolean;
  /**
   *
   * @type {Date}
   * @memberof UserEntity
   */
  lastActiveAt: Date;
  /**
   *
   * @type {Profile}
   * @memberof UserEntity
   */
  profile: Profile;
  /**
   *
   * @type {ForgottenPasswordEntity}
   * @memberof UserEntity
   */
  forgottenPassword: ForgottenPasswordEntity;
  /**
   *
   * @type {EmailVerificationEntity}
   * @memberof UserEntity
   */
  emailVerification: EmailVerificationEntity;
  /**
   *
   * @type {Array<RefreshToken>}
   * @memberof UserEntity
   */
  refreshTokens: Array<RefreshToken>;
}

/**
 * @export
 */
export const UserEntityRolesEnum = {
  Guest: 'guest',
  User: 'user',
  Moderator: 'moderator',
  Admin: 'admin',
} as const;
export type UserEntityRolesEnum =
  (typeof UserEntityRolesEnum)[keyof typeof UserEntityRolesEnum];

/**
 * Check if a given object implements the UserEntity interface.
 */
export function instanceOfUserEntity(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'email' in value;
  isInstance = isInstance && 'password' in value;
  isInstance = isInstance && 'roles' in value;
  isInstance = isInstance && 'confirmed' in value;
  isInstance = isInstance && 'lastActiveAt' in value;
  isInstance = isInstance && 'profile' in value;
  isInstance = isInstance && 'forgottenPassword' in value;
  isInstance = isInstance && 'emailVerification' in value;
  isInstance = isInstance && 'refreshTokens' in value;

  return isInstance;
}

export function UserEntityFromJSON(json: any): UserEntity {
  return UserEntityFromJSONTyped(json, false);
}

export function UserEntityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UserEntity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    email: json['email'],
    nickname: !exists(json, 'nickname') ? undefined : json['nickname'],
    password: json['password'],
    roles: json['roles'],
    confirmed: json['confirmed'],
    lastActiveAt: new Date(json['lastActiveAt']),
    profile: ProfileFromJSON(json['profile']),
    forgottenPassword: ForgottenPasswordEntityFromJSON(
      json['forgottenPassword']
    ),
    emailVerification: EmailVerificationEntityFromJSON(
      json['emailVerification']
    ),
    refreshTokens: (json['refreshTokens'] as Array<any>).map(
      RefreshTokenFromJSON
    ),
  };
}

export function UserEntityToJSON(value?: UserEntity | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    email: value.email,
    nickname: value.nickname,
    password: value.password,
    roles: value.roles,
    confirmed: value.confirmed,
    lastActiveAt: value.lastActiveAt.toISOString(),
    profile: ProfileToJSON(value.profile),
    forgottenPassword: ForgottenPasswordEntityToJSON(value.forgottenPassword),
    emailVerification: EmailVerificationEntityToJSON(value.emailVerification),
    refreshTokens: (value.refreshTokens as Array<any>).map(RefreshTokenToJSON),
  };
}
